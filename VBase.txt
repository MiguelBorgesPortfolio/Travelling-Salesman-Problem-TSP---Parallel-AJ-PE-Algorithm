#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/wait.h>
#include <sys/shm.h>
#include <sys/ipc.h>
#include <string.h>
#include <time.h>
#include <sys/time.h>

#define MAX_LINE_LENGTH 100
#define SHM_KEY 1234

typedef struct {
    int cities;
    int *path; 
    int *bestPath; 
    double distance;
    int bestIteration;
    int iterationCount;
} Path;

int **distances;
double *bestTimePtr;

void createChildProcesses(int numProcesses, Path *sharedMemory, key_t shmKey, key_t bestTimeKey, int maxTime);
void exchangeMutation(Path *path);
void initializePathWithDistances(Path *path, int numCities);
double calculateDistance(Path *path);
void printDistancesMatrix(int numCities);
void waitForChildProcesses(int numProcesses);
void executeAlgorithm(Path *sharedMemory, int maxTime, double *bestTimePtr);

key_t createSharedMemory() {
    key_t key = ftok("/tmp", 'R');
    if (key == -1) {
        perror("ftok");
        exit(EXIT_FAILURE);
    }

    int shmid = shmget(key, sizeof(Path), IPC_CREAT | 0666);
    if (shmid == -1) {
        perror("shmget");
        exit(EXIT_FAILURE);
    }

    return key;
}

key_t createBestTimeSharedMemory() {
    key_t key = ftok("/tmp", 'B');
    if (key == -1) {
        perror("ftok");
        exit(EXIT_FAILURE);
    }

    int shmid = shmget(key, sizeof(double), IPC_CREAT | 0666);
    if (shmid == -1) {
        perror("shmget");
        exit(EXIT_FAILURE);
    }

    return key;
}

void createChildProcesses(int numProcesses, Path *sharedMemory, key_t shmKey, key_t bestTimeKey, int maxTime) {
    pid_t pid;
    for (int i = 0; i < numProcesses; ++i) {
        pid = fork();

        if (pid == -1) {
            perror("fork");
            exit(EXIT_FAILURE);
        } else if (pid == 0) {
            srand(getpid());
            executeAlgorithm(sharedMemory, maxTime, bestTimePtr);
            exit(EXIT_SUCCESS);
        }
    }
}

void exchangeMutation(Path *path) {
    int pos = rand() % (path->cities - 1);

    int temp = path->path[pos];
    path->path[pos] = path->path[pos + 1];
    path->path[pos + 1] = temp;

    path->distance = calculateDistance(path);
}

void initializePathWithDistances(Path *path, int numCities) {
    path->cities = numCities;
    path->distance = 0;

    path->path = malloc(numCities * sizeof(int));
    if (!path->path) {
        perror("malloc");
        exit(EXIT_FAILURE);
    }

    for (int i = 0; i < numCities; ++i) {
        path->path[i] = i;
    }

    for (int i = numCities - 1; i > 0; --i) {
        int j = rand() % (i + 1);
        int temp = path->path[i];
        path->path[i] = path->path[j];
        path->path[j] = temp;
    }

    path->distance = calculateDistance(path);
}

double calculateDistance(Path *path) {
    double totalDistance = 0.0;

    for (int i = 0; i < path->cities - 1; ++i) {
        int city1 = path->path[i];
        int city2 = path->path[i + 1];
        totalDistance += distances[city1][city2];
    }

    totalDistance += distances[path->path[path->cities - 1]][path->path[0]];

    return totalDistance;
}

void readSquareMatrixFromFile(const char *filename, int *size, int ***matrix) {
    FILE *file = fopen(filename, "r");

    if (file == NULL) {
        fprintf(stderr, "Erro ao abrir o arquivo.\n");
        exit(EXIT_FAILURE);
    }

    fscanf(file, "%d", size);

    *matrix = (int **)malloc(*size * sizeof(int *));
    for (int i = 0; i < *size; i++) {
        (*matrix)[i] = (int *)malloc(*size * sizeof(int));
    }

    printf("\nMatriz de distâncias lida do arquivo:\n");
    for (int i = 0; i < *size; i++) {
        for (int j = 0; j < *size; j++) {
            fscanf(file, "%d", &(*matrix)[i][j]);
            printf("%d ", (*matrix)[i][j]);
        }
        printf("\n");
    }

    fclose(file);
}

void printDistancesMatrix(int numCities) {
    printf("Matriz de distâncias:\n");
    for (int i = 0; i < numCities; ++i) {
        for (int j = 0; j < numCities; ++j) {
            printf("%d ", distances[i][j]);
        }
        printf("\n");
    }
}

void waitForChildProcesses(int numProcesses) {
    int status;
    for (int i = 0; i < numProcesses; ++i) {
        wait(&status);
        if (!WIFEXITED(status)) {
            fprintf(stderr, "Erro no processo filho\n");
            exit(EXIT_FAILURE);
        }
    }
}

void freePathMemory(Path *path) {
    free(path->path);
}

void printBestPath(Path *path) {
    printf("Melhor caminho: {");
    for (int i = 0; i < path->cities; ++i) {
        printf("%d", path->path[i] + 1);
        if (i < path->cities - 1) {
            printf(" -> ");
        }
    }
    printf("}\n");
}

void executeAlgorithm(Path *sharedMemory, int maxTime, double *bestTimePtr) {
    struct timeval startTime, currentTime;

    gettimeofday(&startTime, NULL);

    int iterations = 0;
    
    while (1) {
        Path currentPath;
        memcpy(&currentPath, sharedMemory, sizeof(Path));

        exchangeMutation(&currentPath);

        double newDistance = calculateDistance(&currentPath);

        if (newDistance < sharedMemory->distance) {
            memcpy(sharedMemory, &currentPath, sizeof(Path));
            sharedMemory->bestIteration = iterations;

            // Atualize bestTimePtr apenas quando uma solução melhor for encontrada
            gettimeofday(&currentTime, NULL);
            *bestTimePtr = (double)(currentTime.tv_sec - startTime.tv_sec) + (double)(currentTime.tv_usec - startTime.tv_usec) / 1000000.0;
            printBestPath(sharedMemory);
        }

        gettimeofday(&currentTime, NULL);
        if ((currentTime.tv_sec - startTime.tv_sec) >= maxTime) {
            break;
        }
        iterations++;
    }
    sharedMemory->iterationCount += iterations;
}

int main(int argc, char *argv[]) {
    if (argc != 4) {
        fprintf(stderr, "Uso: %s <arquivo_matriz_distancias> <num_processos> <tempo_maximo>\n", argv[0]);
        exit(EXIT_FAILURE);
    }

    const char *filename = argv[1];
    int size;
    int **matrix;

    readSquareMatrixFromFile(filename, &size, &matrix);

    printf("\n - - - Soluções Encontradas - - - \n");

    distances = matrix;

    key_t shmKey = createSharedMemory();

    Path *sharedMemory = (Path *)shmat(shmget(shmKey, sizeof(Path), IPC_CREAT | 0666), NULL, 0);
    if (sharedMemory == (Path *)-1) {
        perror("shmat");
        exit(EXIT_FAILURE);
    }

    key_t bestTimeShmKey = createBestTimeSharedMemory();
    bestTimePtr = (double *)shmat(shmget(bestTimeShmKey, sizeof(double), IPC_CREAT | 0666), NULL, 0);
    if (bestTimePtr == (double *)-1) {
        perror("shmat");
        exit(EXIT_FAILURE);
    }

    initializePathWithDistances(sharedMemory, size);

    int numProcesses = atoi(argv[2]);
    int maxTime = atoi(argv[3]);
    struct timeval tvi, tvf, tv_res;

    // Get the start time
    gettimeofday(&tvi, NULL);
    createChildProcesses(numProcesses, sharedMemory, shmKey, bestTimeShmKey, maxTime);

    waitForChildProcesses(numProcesses);
    gettimeofday(&tvf, NULL);

    // Calculate the elapsed time
    timersub(&tvf, &tvi, &tv_res);

    printf("\nMelhor solução encontrada: %f\n", sharedMemory->distance);
    printf("Iteração em que a melhor solução foi encontrada: %d\n", sharedMemory->bestIteration);
    printf("Número total de iterações: %d\n", sharedMemory->iterationCount);
    printf("Tempo de execução: %ld.%03ld seconds.\n", (long)tv_res.tv_sec, (long)tv_res.tv_usec / 1000);
    printf("Melhor tempo: %f seconds\n", *bestTimePtr);

    for (int i = 0; i < size; ++i) {
        free(distances[i]);
    }
    free(distances);

    freePathMemory(sharedMemory);

    if (shmctl(shmget(shmKey, sizeof(Path), IPC_CREAT | 0666), IPC_RMID, NULL) == -1) {
        perror("shmctl");
        exit(EXIT_FAILURE);
    }

    return EXIT_SUCCESS;
}